//
//  OnboardController.swift
//  Adios
//
//  Created by Armand Grillet on 22/08/2015.
//  Copyright Â© 2015 Armand Grillet. All rights reserved.
//

import Foundation

class OnboardManager {
    var mainList: String {
        get {
            if let list = NSUserDefaults.standardUserDefaults().stringForKey("mainList") {
                return list
            } else {
                return getLogicCountry()
            }
        }
        set {
            NSUserDefaults.standardUserDefaults().setValue(newValue, forKey: "mainList")
        }
    }
    var secondList: String? {
        get {
            if let list = NSUserDefaults.standardUserDefaults().stringForKey("secondList") {
                return list
            } else {
                return "No"
            }
        }
        set {
            NSUserDefaults.standardUserDefaults().setValue(newValue, forKey: "secondList")
        }
    }
    var blockAdblockWarnings: Bool {
        get {
            return NSUserDefaults.standardUserDefaults().boolForKey("blockAdblockWarnings")
        }
        set {
            print("On le set a \(newValue)")
            NSUserDefaults.standardUserDefaults().setBool(newValue, forKey: "blockAdblockWarnings")
        }
    }
    var social: Bool {
        get {
            return NSUserDefaults.standardUserDefaults().boolForKey("social")
        }
        set {
            NSUserDefaults.standardUserDefaults().setBool(newValue, forKey: "social")
        }
    }
    var privacy: Bool {
        get {
            return NSUserDefaults.standardUserDefaults().boolForKey("privacy")
        }
        set {
            NSUserDefaults.standardUserDefaults().setBool(newValue, forKey: "privacy")
        }
    }
    
    let lists = ["Arabic region ðŸ‡ªðŸ‡¬", "Bulgaria ðŸ‡§ðŸ‡¬", "China ðŸ‡¨ðŸ‡³", "Czech and Slovak Rep. ðŸ‡¸ðŸ‡°", "Denmark ðŸ‡©ðŸ‡°", "France ðŸ‡«ðŸ‡·", "Estonia ðŸ‡ªðŸ‡ª", "Germany ðŸ‡©ðŸ‡ª", "Greece ðŸ‡¬ðŸ‡·", "Hungary ðŸ‡­ðŸ‡º", "Iceland ðŸ‡®ðŸ‡¸", "Indonesia ðŸ‡®ðŸ‡©", "Italy ðŸ‡®ðŸ‡¹", "Israel ðŸ‡®ðŸ‡±", "Japan ðŸ‡¯ðŸ‡µ", "Latvia ðŸ‡±ðŸ‡»", "Netherlands ðŸ‡³ðŸ‡±", "Poland ðŸ‡µðŸ‡±", "Romania ðŸ‡·ðŸ‡´", "Russia ðŸ‡·ðŸ‡º", "United Kingdom ðŸ‡¬ðŸ‡§", "U.S.A ðŸ‡ºðŸ‡¸"]
    
    func getLogicCountry() -> String {
        switch NSLocale.currentLocale().objectForKey(NSLocaleCountryCode) as! String {
        case "EG", "SA":
            return "Arabic region ðŸ‡ªðŸ‡¬"
        case "BG":
            return "Bulgaria ðŸ‡§ðŸ‡¬"
        case "CN":
            return "China ðŸ‡¨ðŸ‡³"
        case "CZ", "SK":
            return "Czech and Slovak Rep. ðŸ‡¸ðŸ‡°"
        case "DK":
            return "Denmark ðŸ‡©ðŸ‡°"
        case "FR":
            return "France ðŸ‡«ðŸ‡·"
        case "EE":
            return "Estonia ðŸ‡ªðŸ‡ª"
        case "DE":
            return "Germany ðŸ‡©ðŸ‡ª"
        case "GR":
            return "Greece ðŸ‡¬ðŸ‡·"
        case "HU":
            return "Hungary ðŸ‡­ðŸ‡º"
        case "IS":
            return "Iceland ðŸ‡®ðŸ‡¸"
        case "ID":
            return "Indonesia ðŸ‡®ðŸ‡©"
        case "IT":
            return "Italy ðŸ‡®ðŸ‡¹"
        case "IL":
            return "Israel ðŸ‡®ðŸ‡±"
        case "JP":
            return "Japan ðŸ‡¯ðŸ‡µ"
        case "LV":
            return "Latvia ðŸ‡±ðŸ‡»"
        case "NL":
            return "Netherlands ðŸ‡³ðŸ‡±"
        case "PL":
            return "Poland ðŸ‡µðŸ‡±"
        case "RO":
            return "Poland ðŸ‡µðŸ‡±"
        case "RU":
            return "Russia ðŸ‡·ðŸ‡º"
        case "GB":
            return "United Kingdom ðŸ‡¬ðŸ‡§"
        default:
            return "U.S.A ðŸ‡ºðŸ‡¸"
        }
    }
    
    func getMainLists() -> [String] {
        let firstList = getLogicCountry()
        var mainLists = lists
        mainLists.removeAtIndex(mainLists.indexOf(firstList)!)
        mainLists.insert(firstList, atIndex: 0)
        return mainLists
    }
    
    func getSecondLists() -> [String] {
        var secondLists = lists
        secondLists.removeAtIndex(secondLists.indexOf(mainList)!)
        secondLists.insert("No", atIndex: 0)
        return secondLists
    }
}