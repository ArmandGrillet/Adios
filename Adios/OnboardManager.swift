//
//  OnboardController.swift
//  Adios
//
//  Created by Armand Grillet on 22/08/2015.
//  Copyright Â© 2015 Armand Grillet. All rights reserved.
//

import Foundation

class OnboardManager {
    var mainList: String? {
        get {
            if let list = NSUserDefaults.standardUserDefaults().stringForKey("tempMainList") {
                return list
            } else {
                return getLogicCountry()
            }
        }
        set {
            if newValue != nil {
                NSUserDefaults.standardUserDefaults().setValue(newValue, forKey: "tempMainList")
            } else {
                NSUserDefaults.standardUserDefaults().setValue(getLogicCountry(), forKey: "tempMainList")
            }
        }
    }
    var secondList: String? {
        get {
            if let list = NSUserDefaults.standardUserDefaults().stringForKey("tempSecondList") {
                if list == mainList {
                    return "No"
                } else {
                    return list
                }
            } else {
                return "No"
            }
        }
        set {
            if newValue != nil {
                NSUserDefaults.standardUserDefaults().setValue(newValue, forKey: "tempSecondList")
            } else {
                NSUserDefaults.standardUserDefaults().setValue("No", forKey: "tempSecondList")
            }
            
        }
    }
    var blockAdblockWarnings: Bool {
        get {
            return NSUserDefaults.standardUserDefaults().boolForKey("tempBlockAdblockWarnings")
        }
        set {
            NSUserDefaults.standardUserDefaults().setBool(newValue, forKey: "tempBlockAdblockWarnings")
        }
    }
    var antisocial: Bool {
        get {
            return NSUserDefaults.standardUserDefaults().boolForKey("tempAntisocial")
        }
        set {
            NSUserDefaults.standardUserDefaults().setBool(newValue, forKey: "tempAntisocial")
        }
    }
    var privacy: Bool {
        get {
            return NSUserDefaults.standardUserDefaults().boolForKey("tempPrivacy")
        }
        set {
            NSUserDefaults.standardUserDefaults().setBool(newValue, forKey: "tempPrivacy")
        }
    }
    
    private let lists = ["Arabic region ðŸ‡ªðŸ‡¬", "Bulgaria ðŸ‡§ðŸ‡¬", "China ðŸ‡¨ðŸ‡³", "Czech and Slovak Rep. ðŸ‡¸ðŸ‡°", "Denmark ðŸ‡©ðŸ‡°", "France ðŸ‡«ðŸ‡·", "Estonia ðŸ‡ªðŸ‡ª", "Germany ðŸ‡©ðŸ‡ª", "Greece ðŸ‡¬ðŸ‡·", "Hungary ðŸ‡­ðŸ‡º", "Iceland ðŸ‡®ðŸ‡¸", "Indonesia ðŸ‡®ðŸ‡©", "Italy ðŸ‡®ðŸ‡¹", "Israel ðŸ‡®ðŸ‡±", "Japan ðŸ‡¯ðŸ‡µ", "Latvia ðŸ‡±ðŸ‡»", "Netherlands ðŸ‡³ðŸ‡±", "Poland ðŸ‡µðŸ‡±", "Romania ðŸ‡·ðŸ‡´", "Russia ðŸ‡·ðŸ‡º", "United Kingdom ðŸ‡¬ðŸ‡§", "U.S.A ðŸ‡ºðŸ‡¸"]
    
    func getLogicCountry() -> String {
        switch NSLocale.currentLocale().objectForKey(NSLocaleCountryCode) as! String {
        case "EG", "SA":
            return "Arabic region ðŸ‡ªðŸ‡¬"
        case "BG":
            return "Bulgaria ðŸ‡§ðŸ‡¬"
        case "CN":
            return "China ðŸ‡¨ðŸ‡³"
        case "CZ", "SK":
            return "Czech and Slovak Rep. ðŸ‡¸ðŸ‡°"
        case "DK":
            return "Denmark ðŸ‡©ðŸ‡°"
        case "FR":
            return "France ðŸ‡«ðŸ‡·"
        case "EE":
            return "Estonia ðŸ‡ªðŸ‡ª"
        case "DE":
            return "Germany ðŸ‡©ðŸ‡ª"
        case "GR":
            return "Greece ðŸ‡¬ðŸ‡·"
        case "HU":
            return "Hungary ðŸ‡­ðŸ‡º"
        case "IS":
            return "Iceland ðŸ‡®ðŸ‡¸"
        case "ID":
            return "Indonesia ðŸ‡®ðŸ‡©"
        case "IT":
            return "Italy ðŸ‡®ðŸ‡¹"
        case "IL":
            return "Israel ðŸ‡®ðŸ‡±"
        case "JP":
            return "Japan ðŸ‡¯ðŸ‡µ"
        case "LV":
            return "Latvia ðŸ‡±ðŸ‡»"
        case "NL":
            return "Netherlands ðŸ‡³ðŸ‡±"
        case "PL":
            return "Poland ðŸ‡µðŸ‡±"
        case "RO":
            return "Romania ðŸ‡·ðŸ‡´"
        case "RU":
            return "Russia ðŸ‡·ðŸ‡º"
        case "GB":
            return "United Kingdom ðŸ‡¬ðŸ‡§"
        default:
            return "U.S.A ðŸ‡ºðŸ‡¸"
        }
    }
    
    func getRealList(flag: String) -> String? {
        switch flag {
        case "ðŸ‡ªðŸ‡¬":
            return "EasyList_Arabic"
        case "ðŸ‡§ðŸ‡¬":
            return "EasyList_Bulgaria"
        case "ðŸ‡¨ðŸ‡³":
            return "EasyList_China"
        case "ðŸ‡¸ðŸ‡°":
            return "EasyList_Czechoslovakia"
        case "ðŸ‡©ðŸ‡°":
            return "List_Danish"
        case "ðŸ‡«ðŸ‡·":
            return "EasyList_France"
        case "ðŸ‡ªðŸ‡ª":
            return "List_Estonia"
        case "ðŸ‡©ðŸ‡ª":
            return "EasyList_Germany"
        case "ðŸ‡¬ðŸ‡·":
            return "EasyList_Greece"
        case "ðŸ‡­ðŸ‡º":
            return "List_Hungary"
        case "ðŸ‡®ðŸ‡¸":
            return "EasyList_Iceland"
        case "ðŸ‡®ðŸ‡©":
            return "EasyList_Indonesia"
        case "ðŸ‡®ðŸ‡¹":
            return "EasyList_Italy"
        case "ðŸ‡®ðŸ‡±":
            return "EasyList_Hebrew"
        case "ðŸ‡¯ðŸ‡µ":
            return "List_Japan"
        case "ðŸ‡±ðŸ‡»":
            return "EasyList_Latvia"
        case "ðŸ‡³ðŸ‡±":
            return "EasyList_Dutch"
        case "ðŸ‡µðŸ‡±":
            return "EasyList_Poland"
        case "ðŸ‡·ðŸ‡´":
            return "EasyList_Romania"
        case "ðŸ‡·ðŸ‡º":
            return "EasyList_Russia"
        case "ðŸ‡¬ðŸ‡§":
            return "List_England"
        case "ðŸ‡ºðŸ‡¸":
            return "EasyList"
        default:
            return nil
        }
    }
    
    func getCountryFromList(list: String) -> String? {
        switch list {
        case "EasyList_Arabic":
            return "Arabic region ðŸ‡ªðŸ‡¬"
        case "EasyList_Bulgaria":
            return "Bulgaria ðŸ‡§ðŸ‡¬"
        case "EasyList_China":
            return "China ðŸ‡¨ðŸ‡³"
        case "EasyList_Czechoslovakia":
            return "Czech and Slovak Rep. ðŸ‡¸ðŸ‡°"
        case "List_Danish":
            return "Denmark ðŸ‡©ðŸ‡°"
        case "EasyList_France":
            return "France ðŸ‡«ðŸ‡·"
        case "List_Estonia":
            return "Estonia ðŸ‡ªðŸ‡ª"
        case "EasyList_Germany":
            return "Germany ðŸ‡©ðŸ‡ª"
        case "EasyList_Greece":
            return "Greece ðŸ‡¬ðŸ‡·"
        case "List_Hungary":
            return "Hungary ðŸ‡­ðŸ‡º"
        case "EasyList_Iceland":
            return "Iceland ðŸ‡®ðŸ‡¸"
        case "EasyList_Indonesia":
            return "Indonesia ðŸ‡®ðŸ‡©"
        case "EasyList_Italy":
            return "Italy ðŸ‡®ðŸ‡¹"
        case "EasyList_Hebrew":
            return "Israel ðŸ‡®ðŸ‡±"
        case "List_Japan":
            return "Japan ðŸ‡¯ðŸ‡µ"
        case "EasyList_Latvia":
            return "Latvia ðŸ‡±ðŸ‡»"
        case "EasyList_Dutch":
            return "Netherlands ðŸ‡³ðŸ‡±"
        case "EasyList_Poland":
            return "Poland ðŸ‡µðŸ‡±"
        case "EasyList_Romania":
            return "Romania ðŸ‡·ðŸ‡´"
        case "EasyList_Russia":
            return "Russia ðŸ‡·ðŸ‡º"
        case "List_England":
            return "United Kingdom ðŸ‡¬ðŸ‡§"
        case "EasyList":
            return "U.S.A ðŸ‡ºðŸ‡¸"
        default:
            return nil
        }
    }
    
    func getMainLists() -> [String] {
        return lists
    }
    
    func getMainListPosition() -> Int {
        return lists.indexOf(mainList!)!
    }
    
    func getSecondLists() -> [String] {
        var secondLists = lists
        secondLists.removeAtIndex(secondLists.indexOf(mainList!)!)
        secondLists.insert("No", atIndex: 0)
        return secondLists
    }
    
    func getSecondListPosition() -> Int {
        return getSecondLists().indexOf(secondList!)!
    }
    
    func getRealListsFromChoices() -> [String] {
        var realLists: [String] = []
        
        let mainListFlag = mainList!.substringFromIndex(mainList!.endIndex.predecessor())
        if let realMainList = getRealList(mainListFlag) {
            realLists.append(realMainList)
        }
        
        if secondList! != "No" {
            if secondList != mainList {
                let secondListFlag = secondList!.substringFromIndex(secondList!.endIndex.predecessor())
                if let realSecondList = getRealList(secondListFlag) {
                    realLists.append(realSecondList)
                }
            }
        }
        
        if blockAdblockWarnings {
            realLists.append("AdblockWarningRemoval")
        }
        if antisocial {
            realLists.append("EasyList_SocialMedia")
        }
        if privacy {
            realLists.append("EasyPrivacy")
        }
        
        return realLists
    }
    
    func reset() {
        mainList = nil
        secondList = nil
        blockAdblockWarnings = true
        antisocial = true
        privacy = true
    }
}